{"version":3,"file":"static/js/502.5330c0ed.chunk.js","mappings":"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","sources":["components/Header/index.jsx","components/MainContainer/index.jsx","hooks/useCountDown.js","components/Timer/index.jsx","config/index.jsx","hooks/connectors.js","hooks/useConnectWallet.js","hooks/useDisconnectWallet.js","hooks/useOnClickOutside.js","utils/utils.jsx","hooks/useSwitchChain.js","hooks/useFetch.js","services/blockchain/assetService.jsx","services/blockchain/blockchainService.jsx","services/blockchain/sugarHeadService.jsx","store/actions/globalActions.jsx","utils/alchemy.js"],"sourcesContent":["import laptopHeader from 'assets/images/header_laptop.jpg';\nimport mobileHeader from 'assets/images/header_mobile.jpg';\nimport tabletHeader from 'assets/images/header_tablet.jpg';\nimport menuImg from 'assets/images/menu.png';\nimport { useOnClickOutside } from 'hooks';\nimport React, { useRef, useState } from 'react';\nimport LazyLoad from 'react-lazyload';\nimport { toast } from 'react-toastify';\n\nimport { Box } from '@mui/material';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n  const menuRef = useRef(null);\n  const [isMenu, setIsMenu] = useState(false);\n  const handleMenu = () => {\n    setIsMenu(!isMenu);\n  };\n  useOnClickOutside(menuRef, () => setIsMenu(false));\n\n  // const handleOpensea = () => {\n  //   toast.info('Coming Soon!', {\n  //     position: toast.POSITION.TOP_CENTER,\n  //     autoClose: 1500,\n  //     hideProgressBar: true,\n  //   });\n  // };\n  return (\n    <LazyLoad height={200}>\n      <Box\n        sx={{\n          height: '120px',\n          width: '100%',\n          backgroundPosition: 'center top',\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          backgroundImage: `url(${mobileHeader})`,\n          '@media (min-width: 768px)': {\n            backgroundImage: `url(${tabletHeader})`,\n            height: '200px',\n          },\n          '@media (min-width: 1024px)': {\n            backgroundImage: `url(${laptopHeader})`,\n            height: '300px',\n          },\n          '@media (min-width: 1920px)': {\n            height: '400px',\n          },\n        }}\n      >\n        <Box\n          ref={menuRef}\n          sx={{\n            position: 'absolute',\n            right: '10px',\n            top: '10px',\n            '@media (min-width: 375px)': {\n              right: '20px',\n              top: '20px',\n            },\n            '@media (min-width: 768px)': {\n              right: '30px',\n              top: '30px',\n            },\n            textAlign: 'right',\n            zIndex: 10000,\n          }}\n          onClick={handleMenu}\n        >\n          <Box\n            component=\"img\"\n            src={menuImg}\n            sx={{\n              height: '40px',\n              width: '40px',\n              '@media (min-width: 768px)': {\n                height: '50px',\n                width: '50px',\n              },\n              '@media (min-width: 1024px)': {\n                height: '100px',\n                width: '100px',\n              },\n              cursor: 'pointer',\n            }}\n          />\n          {isMenu && (\n            <Box\n              sx={{\n                backgroundColor: '#d89810',\n                padding: '5px 10px',\n                cursor: 'pointer',\n              }}\n            >\n              <Box\n                component=\"a\"\n                target=\"_blank\"\n                href=\"https://twitter.com/SugarHeads_NFT\"\n                sx={{\n                  fontFamily: 'LapsusBold',\n                  letterSpacing: '4px',\n                  '@media (min-width: 768px)': {\n                    fontSize: '35px',\n                  },\n                  '@media (min-width: 1024px)': {\n                    fontSize: '50px',\n                  },\n                  borderBottom: '2px solid black',\n                  textDecoration: 'none',\n                  color: '#1c1404',\n                  display: 'block',\n                }}\n              >\n                TWITTER\n              </Box>\n              <Box\n                component=\"a\"\n                target=\"_blank\"\n                href=\"https://discord.com/invite/ZbQbQrar8g\"\n                sx={{\n                  fontFamily: 'LapsusBold',\n                  letterSpacing: '4px',\n                  '@media (min-width: 768px)': {\n                    fontSize: '35px',\n                  },\n                  '@media (min-width: 1024px)': {\n                    fontSize: '50px',\n                  },\n                  borderBottom: '2px solid black',\n                  textDecoration: 'none',\n                  color: '#1c1404',\n                  display: 'block',\n                }}\n              >\n                DISCORD\n              </Box>\n              <Box\n                component=\"a\"\n                target=\"_blank\"\n                href=\"https://opensea.io/collection/sugarheadsnft\"\n                sx={{\n                  fontFamily: 'LapsusBold',\n                  letterSpacing: '4px',\n                  '@media (min-width: 768px)': {\n                    fontSize: '35px',\n                  },\n                  '@media (min-width: 1024px)': {\n                    fontSize: '50px',\n                  },\n                  display: 'block',\n                  borderBottom: '2px solid black',\n                  textDecoration: 'none',\n                  color: '#1c1404',\n                }}\n              >\n                OPENSEA\n              </Box>\n              <Box\n                component=\"a\"\n                target=\"_blank\"\n                href=\"\"\n                sx={{\n                  fontFamily: 'LapsusBold',\n                  letterSpacing: '4px',\n                  '@media (min-width: 768px)': {\n                    fontSize: '35px',\n                  },\n                  '@media (min-width: 1024px)': {\n                    fontSize: '50px',\n                  },\n                  display: 'block',\n                  textDecoration: 'none',\n                  color: '#1c1404',\n                }}\n              >\n                <Link\n                  to=\"/analytics\"\n                  style={{ textDecoration: 'none', color: 'inherit' }}\n                >\n                  ANALYTICS\n                </Link>\n              </Box>\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </LazyLoad>\n  );\n}\n\nexport default Header;\n","import body_tablet from 'assets/images/body_tablet.jpg';\r\nimport sidebarURL from 'assets/images/sidebar.jpg';\r\nimport Header from 'components/Header';\r\nimport React from 'react';\r\nimport LazyLoad from 'react-lazyload';\r\n\r\nimport { Box, Container } from '@mui/material';\r\n\r\nfunction MainContainer({ children }) {\r\n  return (\r\n    <Box>\r\n      <Header />\r\n      <LazyLoad height={1000}>\r\n        <Container\r\n          disableGutters\r\n          sx={{\r\n            display: 'flex',\r\n            padding: '0 15px',\r\n            maxWidth: {\r\n              lg: '2030px',\r\n            },\r\n            width: '100%',\r\n            backgroundPosition: 'center top',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundImage: `url(${body_tablet})`,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: 'none',\r\n              width: '150px',\r\n              backgroundImage: `url(${sidebarURL})`,\r\n              backgroundSize: 'cover',\r\n              backgroundPosition: 'center top',\r\n              backgroundRepeat: 'repeat',\r\n              '@media (min-width: 769px)': {\r\n                display: 'block',\r\n              },\r\n            }}\r\n          />\r\n          <Box\r\n            sx={{\r\n              width: '100%',\r\n              display: 'flex',\r\n              justifyContent: 'flex-start',\r\n              '@media (min-width: 769px)': {\r\n                width: 'calc(100% - 165px)',\r\n              },\r\n            }}\r\n          >\r\n            {children}\r\n          </Box>\r\n        </Container>\r\n      </LazyLoad>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useCountdown = (targetDate) => {\r\n  const countDownDate = new Date(targetDate).getTime();\r\n\r\n  const [countDown, setCountDown] = useState(\r\n    countDownDate - new Date().getTime()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCountDown(countDownDate - new Date().getTime());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [countDownDate]);\r\n\r\n  return getReturnValues(countDown);\r\n};\r\n\r\nconst getReturnValues = (countDown) => {\r\n  // calculate time left\r\n  const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\r\n  const hours = Math.floor(\r\n    (countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n  );\r\n  const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\r\n  const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\r\n\r\n  return [days, hours, minutes, seconds];\r\n};\r\n\r\nexport { useCountdown };\r\n","import { useCountdown } from 'hooks/useCountDown';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { store } from 'store';\r\nimport { setClaimable } from 'store/actions/globalActions';\r\n\r\nimport { Typography } from '@mui/material';\r\n\r\nfunction Timer({ targetTime }) {\r\n  const [days, hours, minutes, seconds] = useCountdown(targetTime);\r\n  const [isExpired, setIsExpired] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (days + hours + minutes + seconds <= 0) {\r\n      store.dispatch(setClaimable());\r\n      setIsExpired(true);\r\n    }\r\n  }, [days, hours, minutes, seconds]);\r\n\r\n  if (isExpired) {\r\n    return (\r\n      <Typography\r\n        sx={{\r\n          fontFamily: 'LapsusBold',\r\n          fontSize: 20,\r\n          color: '#db9b13',\r\n\r\n          '@media (min-width: 768px)': {\r\n            fontSize: 30,\r\n          },\r\n          '@media (min-width: 1024px)': {\r\n            WebkitTextStroke: '2px black',\r\n            fontSize: 40,\r\n          },\r\n          '@media (min-width: 1440px)': {\r\n            fontSize: 60,\r\n          },\r\n          WebkitTextStroke: '1px black',\r\n        }}\r\n      >\r\n        Expired\r\n      </Typography>\r\n    );\r\n  } else {\r\n    return (\r\n      <Typography\r\n        sx={{\r\n          fontFamily: 'LapsusBold',\r\n          fontSize: 15,\r\n          color: '#db9b13',\r\n\r\n          '@media (min-width: 768px)': {\r\n            fontSize: 25,\r\n          },\r\n          '@media (min-width: 1024px)': {\r\n            WebkitTextStroke: '2px black',\r\n            fontSize: 25,\r\n          },\r\n          '@media (min-width: 1440px)': {\r\n            fontSize: 45,\r\n          },\r\n          WebkitTextStroke: '1px black',\r\n        }}\r\n      >\r\n        {days}d : {hours}h : {minutes}m : {seconds}s\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import configDev from './config.dev.json';\r\nimport configProd from './config.real.json';\r\n\r\nconst NODE_ENVS = {\r\n  DEV: 'development',\r\n  PROD: 'production',\r\n};\r\nconst config = process.env.NODE_ENV === NODE_ENVS.DEV ? configDev : configProd;\r\n\r\nexport default config;\r\n","import config from 'config';\r\n\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedchainIds: [config.chainId],\r\n});\r\n\r\nexport const connectorsByName = {\r\n  Injected: injected,\r\n};\r\n\r\nexport const connectorName = 'Injected';\r\n","import { connectorName, connectorsByName } from 'hooks/connectors';\n\nimport { useWeb3React } from '@web3-react/core';\n\nfunction useConnectWallet() {\n  const { activate } = useWeb3React();\n  return () => {\n    activate(connectorsByName[connectorName]);\n  };\n}\n\nexport default useConnectWallet;\n","import { connectorName, connectorsByName } from 'hooks/connectors';\n\nimport { useWeb3React } from '@web3-react/core';\n\nfunction useDisconnectWallet() {\n  const { deactivate } = useWeb3React();\n  return () => {\n    deactivate(connectorsByName[connectorName]);\n  };\n}\n\nexport default useDisconnectWallet;\n","import { useEffect } from 'react';\n\nfunction useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n\nexport default useOnClickOutside;\n","const convertToHex = (value) => {\r\n  return ['0x', value.toString(16)].join('');\r\n};\r\n\r\nfunction shortWeb3Acount(currentAccount) {\r\n  if (currentAccount) {\r\n    return currentAccount\r\n      .slice(0, 6)\r\n      .concat('...')\r\n      .concat(\r\n        currentAccount.slice(currentAccount.length - 4, currentAccount.length)\r\n      );\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst sleep = (milliseconds) => {\r\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n\r\nexport { convertToHex, shortWeb3Acount, sleep };\r\n","import { convertToHex } from 'utils/utils';\n\nfunction useSwitchChain() {\n  return (chainId) => {\n    (async function () {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: convertToHex(chainId) }], // chainId must be in hexadecimal numbers\n      });\n    })();\n  };\n}\n\nexport default useSwitchChain;\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setdata] = useState(null);\r\n  const [loading, setloading] = useState(true);\r\n  const [error, seterror] = useState('');\r\n  useEffect(() => {\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        setdata(response.data);\r\n        setloading(false);\r\n      })\r\n      .catch((error) => {\r\n        seterror(error);\r\n        setloading(false);\r\n      });\r\n  }, [url]);\r\n  return { data, loading, error };\r\n};\r\nexport default useFetch;\r\n","import AssetLockAbi from 'abi/AssetLock.json';\r\nimport config from 'config';\r\n\r\nimport BlockchainService from './blockchainService';\r\n\r\nclass AssetService extends BlockchainService {\r\n  constructor(assetAddress) {\r\n    super();\r\n    this.contractAddress = assetAddress;\r\n    this.contract = new this.web3.eth.Contract(AssetLockAbi, assetAddress);\r\n  }\r\n\r\n  getAssetBalance = async (address) =>\r\n    this.contract.methods.getAssetBalance(address).call();\r\n\r\n  getUsedTokenIdsOf = async (address) =>\r\n    this.contract.methods.getUsedTokenIdsOf(address).call();\r\n\r\n  claimAsset = async (from, tokenIds) => {\r\n    try {\r\n      console.log('cla', tokenIds);\r\n      const dataAbi = this.contract.methods.claim(tokenIds).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // getAssetBalance = async (asset) => {\r\n  //   try {\r\n  //     const { da } = this.contract.methods.getAssetBalance(asset).call();\r\n  //     console.log('bal', balance);\r\n  //     return parseInt(balance);\r\n  //   } catch (err) {\r\n  //     console.log('err', err);\r\n  //   }\r\n  // };\r\n}\r\n\r\nconst assetService = new AssetService(config.assetLockAddress);\r\n\r\nexport default AssetService;\r\nexport { assetService };\r\n","import config from 'config';\r\nimport Web3 from 'web3';\r\n\r\nclass BlockchainService {\r\n  constructor() {\r\n    const selectedProvider = Math.floor(\r\n      Math.random() * config.chainRpcUrls.length\r\n    );\r\n    const blockchainProvider = config.chainRpcUrls[selectedProvider];\r\n\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(blockchainProvider));\r\n    this.chainId = config.chainId;\r\n  }\r\n\r\n  getNonce = async (address) => this.web3.eth.getTransactionCount(address);\r\n\r\n  getEthBalance = async (address) => this.web3.eth.getBalance(address);\r\n\r\n  // sign transaction using metamask\r\n  signTransaction = async (address, dataABI, _etherAmount) => {\r\n    const transactionParameters = {\r\n      to: this.contractAddress, // Required except during contract publications.\r\n      from: address, // must match user's active address.\r\n      data: dataABI,\r\n      chainId: this.chainId,\r\n      value: parseInt(_etherAmount).toString(16), // this should be hex !!!!\r\n    };\r\n\r\n    //sign the transaction\r\n    try {\r\n      const txHash = await window.ethereum.request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n      return await this.checkTx(txHash);\r\n    } catch (error) {\r\n      alert('There was an error in sending transaction. Please try again.');\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  checkTx = async (txHash) => {\r\n    // let result = await web3.eth.getTransaction(txHash)\r\n    let result = null;\r\n    while (result == null) {\r\n      result = await this.web3.eth.getTransactionReceipt(txHash.toString());\r\n    }\r\n    if (result.status) return txHash;\r\n    else return null;\r\n  };\r\n}\r\n\r\nconst blockchainService = new BlockchainService();\r\n\r\nexport default BlockchainService;\r\nexport { blockchainService };\r\n","import ERC721Abi from 'abi/ERC721.json';\r\nimport SugarHeadAbi from 'abi/SugarHeadNFT.json';\r\nimport config from 'config';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport BlockchainService from './blockchainService';\r\n\r\nclass SugarHeadService extends BlockchainService {\r\n  constructor(sugarHeadAddr) {\r\n    super();\r\n    this.contractAddress = sugarHeadAddr;\r\n    this.contract = new this.web3.eth.Contract(SugarHeadAbi, sugarHeadAddr);\r\n  }\r\n\r\n  getTokenIdsOf = async (address) =>\r\n    this.contract.methods.getTokenIdsOf(address).call();\r\n\r\n  getCurrentTokenId = async () =>\r\n    this.contract.methods.getCurrentTokenId().call();\r\n\r\n  getPrice = async () => this.contract.methods.getPrice().call();\r\n\r\n  getCurrentPhase = async () => this.contract.methods.currentPhase().call();\r\n\r\n  getFreeMintNumber = async (address) =>\r\n    this.contract.methods.freeMinters(address).call();\r\n\r\n  checkAmount = async (amount) => {\r\n    if (amount > config.maxTicketsPerTX) {\r\n      toast.error(\r\n        `You can't buy more than ${config.maxTicketsPerTX} tickets at once.`\r\n      );\r\n      return false;\r\n    }\r\n    if (amount < 0) {\r\n      toast.error(`Invalid Amount`);\r\n      return false;\r\n    }\r\n\r\n    const currentTokenId = parseInt(await this.getCurrentTokenId());\r\n    if (currentTokenId + amount >= config.totalSuppy) {\r\n      toast.error(`Remained NFTs are less than ${amount}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  checkEthBalance = async (from, ethAmount) => {\r\n    const ethBalance = await this.getEthBalance(from);\r\n    if (Number(ethBalance) < ethAmount) {\r\n      toast.error(\"You don't have enough funds\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  checkIsEarlyMinter = async (from) => {\r\n    const isEarlyMinter = await this.contract.methods\r\n      .isEarlyMinter(from)\r\n      .call();\r\n    console.log('isEarly', isEarlyMinter);\r\n\r\n    if (isEarlyMinter) return true;\r\n    else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  buyNFTForFree = async (from) => {\r\n    try {\r\n      const isWhitelisted =\r\n        parseInt(await this.contract.methods.freeMinters(from).call()) > 0;\r\n\r\n      if (!isWhitelisted) {\r\n        toast.error(\"You aren't whitelisted.\");\r\n        return null;\r\n      }\r\n      const dataAbi = this.contract.methods.buyNFTForFree().encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTEarly = async (from, amount, price) => {\r\n    try {\r\n      const ethAmount = price * amount;\r\n      const isEarlyMinter = await this.checkIsEarlyMinter(from);\r\n      const isFundSufficient = await this.checkEthBalance(from, ethAmount);\r\n      const isAmountValid = await this.checkAmount(amount);\r\n\r\n      if (!isAmountValid || !isFundSufficient || !isEarlyMinter) return null;\r\n\r\n      const dataAbi = this.contract.methods.buyNFTEarly(amount).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, ethAmount);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTsInPublic = async (from, amount, price) => {\r\n    try {\r\n      const ethAmount = price * amount;\r\n      const isFundSufficient = await this.checkEthBalance(from, ethAmount);\r\n      const isAmountValid = await this.checkAmount(amount);\r\n      if (!isAmountValid || !isFundSufficient) return null;\r\n      console.log('infunciton', amount);\r\n\r\n      const dataAbi = this.contract.methods.buyNFTsInPublic(amount).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, ethAmount);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\nconst sugarHeadService = new SugarHeadService(config.sugarHeadAddress);\r\n\r\nexport default SugarHeadService;\r\nexport { sugarHeadService };\r\n","import config from 'config';\r\nimport useFetch from 'hooks/useFetch';\r\nimport { assetService } from 'services/blockchain/assetService';\r\nimport { sugarHeadService } from 'services/blockchain/sugarHeadService';\r\n\r\nimport { actionTypes } from './types';\r\n\r\nconst setCurrentPhase = () => {\r\n  return async (dispatch) => {\r\n    const currentPhase = parseInt(await sugarHeadService.getCurrentPhase());\r\n    dispatch({\r\n      type: actionTypes.setCurrentPhase,\r\n      currentPhase,\r\n    });\r\n  };\r\n};\r\n\r\nconst setPrice = () => {\r\n  return async (dispatch) => {\r\n    const price = parseInt(await sugarHeadService.getPrice());\r\n    dispatch({\r\n      type: actionTypes.setPrice,\r\n      price,\r\n    });\r\n  };\r\n};\r\n\r\nconst setCurrentTokenId = () => {\r\n  return async (dispatch) => {\r\n    const currentTokenId = parseInt(await sugarHeadService.getCurrentTokenId());\r\n    dispatch({\r\n      type: actionTypes.setCurrentTokenId,\r\n      currentTokenId,\r\n    });\r\n  };\r\n};\r\n``;\r\nconst setUsedTokenIdsOf = (address) => {\r\n  return async (dispatch) => {\r\n    const usedTokenIdsOf = await assetService.getUsedTokenIdsOf(address);\r\n    console.log('uninininoninonion', usedTokenIdsOf);\r\n    dispatch({\r\n      type: actionTypes.setUsedTokenIdsOf,\r\n      usedTokenIdsOf,\r\n    });\r\n  };\r\n};\r\n\r\nconst setTokenIds = (from) => {\r\n  return async (dispatch) => {\r\n    const tokenIds = await sugarHeadService.getTokenIdsOf(from);\r\n    console.log('token', tokenIds);\r\n    dispatch({\r\n      type: actionTypes.setTokenIds,\r\n      tokenIds,\r\n    });\r\n  };\r\n};\r\n\r\nconst setCoins = () => {\r\n  console.log('here111111111111111');\r\n  return async (dispatch) => {\r\n    console.log('here');\r\n    const { data } = useFetch(`${config.apiBaseURL}coins`);\r\n    console.log('token', data);\r\n    dispatch({\r\n      type: actionTypes.setCoins,\r\n      data,\r\n    });\r\n  };\r\n};\r\n\r\nconst setClaimable = () => {\r\n  return {\r\n    type: actionTypes.setClaimable,\r\n  };\r\n};\r\n\r\nexport {\r\n  setClaimable,\r\n  setCoins,\r\n  setCurrentPhase,\r\n  setCurrentTokenId,\r\n  setPrice,\r\n  setTokenIds,\r\n  setUsedTokenIdsOf,\r\n};\r\n","import { Alchemy, Network } from 'alchemy-sdk';\n\nconst configAlchemy = {\n  apiKey: '6J04CoEooT-xq4ZMGdbAeY1VcNBsAEPt',\n  network: Network.ETH_MAINNET,\n};\n\nconst alchemy = new Alchemy(configAlchemy);\n\nexport const getFloorPrice = async () => {\n  const address = '0x6B302B295955954311e4622BDCCCCF52796422fA';\n  const { openSea } = await alchemy.nft.getFloorPrice(address);\n  return openSea.floorPrice;\n};\n"],"names":["menuRef","useRef","useState","isMenu","setIsMenu","useOnClickOutside","height","Box","sx","width","backgroundPosition","backgroundSize","backgroundRepeat","backgroundImage","mobileHeader","tabletHeader","laptopHeader","ref","position","right","top","textAlign","zIndex","onClick","component","src","menuImg","cursor","backgroundColor","padding","target","href","fontFamily","letterSpacing","fontSize","borderBottom","textDecoration","color","display","to","style","children","Container","disableGutters","maxWidth","lg","body_tablet","sidebarURL","justifyContent","useCountdown","targetDate","countDownDate","Date","getTime","countDown","setCountDown","useEffect","interval","setInterval","clearInterval","getReturnValues","Math","floor","targetTime","days","hours","minutes","seconds","isExpired","setIsExpired","store","setClaimable","Typography","WebkitTextStroke","connectorsByName","Injected","InjectedConnector","supportedchainIds","config","connectorName","activate","useWeb3React","deactivate","handler","listener","event","current","contains","document","addEventListener","removeEventListener","convertToHex","value","toString","join","chainId","window","ethereum","request","method","params","url","data","setdata","loading","setloading","error","seterror","axios","then","response","catch","AssetService","assetAddress","getAssetBalance","address","contract","methods","call","getUsedTokenIdsOf","claimAsset","from","tokenIds","console","log","dataAbi","claim","encodeABI","signTransaction","txHash","contractAddress","web3","eth","Contract","AssetLockAbi","BlockchainService","assetService","getNonce","getTransactionCount","getEthBalance","getBalance","dataABI","_etherAmount","transactionParameters","parseInt","checkTx","alert","result","getTransactionReceipt","status","selectedProvider","random","blockchainProvider","this","Web3","SugarHeadService","sugarHeadAddr","getTokenIdsOf","getCurrentTokenId","getPrice","getCurrentPhase","currentPhase","getFreeMintNumber","freeMinters","checkAmount","amount","toast","checkEthBalance","ethAmount","ethBalance","Number","checkIsEarlyMinter","isEarlyMinter","buyNFTForFree","buyNFTEarly","price","isFundSufficient","buyNFTsInPublic","SugarHeadAbi","sugarHeadService","setCurrentPhase","dispatch","type","actionTypes","setPrice","setCurrentTokenId","currentTokenId","setUsedTokenIdsOf","usedTokenIdsOf","setTokenIds","configAlchemy","apiKey","network","Network","alchemy","Alchemy","getFloorPrice","nft","openSea","floorPrice"],"sourceRoot":""}