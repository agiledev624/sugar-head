{"version":3,"file":"static/js/248.e9265acd.chunk.js","mappings":"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","sources":["../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/es5-ext/global.js","../node_modules/sturdy-websocket/src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/websocket/lib/version.js"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["DEFAULT_MAX_REQUEST_BATCH_SIZE","RequestBatcher","sendBatchFn","maxBatchSize","request","inflightRequest","resolve","undefined","reject","promise","Promise","this","pendingBatch","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","Object","headers","batcher","requests","fetchJson","JSON","stringify","_super","detectNetwork","logWarn","DEFAULT_ALCHEMY_API_KEY","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","enqueueRequest","emit","action","deepCopy","provider","cache","indexOf","_cache","getResult","response","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","values","Network","includes","join","type","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","allowGzip","JsonRpcProvider","WS","WebSocket","logger","Logger","version","throwError","operation","NextId","WebSocketProvider","_pollingInterval","_wsReady","defineReadOnly","websocket","onopen","keys","_requests","send","onmessage","messageEvent","parse","String","callback","sub","_subs","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","value","blockNumber","rid","tag","param","subIdPromise","_subIds","all","subId","event","_subscribe","BigNumber","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","listenerCount","readyState","onerror","close","MAX_BACKFILL_BLOCKS","WebsocketBackfiller","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","getBlockNumber","toBlockNumber","getHeadEventsInRange","Math","max","maxBackfillBlocks","lastSeenBlockNumber","fromHex","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","previousLogs","getLogsInRange","getCommonAncestor","commonAncestor","removedLogs","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","newMax","blockNumberHex","toBlockExclusive","batchParts","i","toHex","sendBatch","blockHeads","toNewHeadsEvent","oldEvent","getBlockByNumber","blockHead","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","dedupeLogs","items","getKey","keysSeen","Set","item","key","has","add","CANCELLED","RETAINED_EVENT_BLOCK_COUNT","AlchemyWebSocketProvider","wsConstructor","protocol","ws","SturdyWebSocket","process","versions","node","require","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","Array","isArray","isResponse","isSubscriptionEvent","physicalId","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","handleReopen","clear","cancelled","cancel","makeCancelToken","cancelBackfill","__awaiter","resubscribeAndBackfill","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","eventName","listener","_addEventListener","isAlchemyEvent","_off","_removeAllListeners","_listenerCount","_listeners","once","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","_startEvent","ALCHEMY_EVENT_TYPES","customStartEvent","startingBlockNumber","resolvedParams","set","sentEvents","args","stopped","eventTag","apply","_stopEvent","parts","nextId","sendBatchConcurrently","removeSocketListeners","addEventListener","removeEventListener","withBackoffRetries","withTimeout","getNewHeadsBackfill","backfillEvents","emitNewHeadsEvent","getLogsBackfill","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","reconnect","req","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","AlchemySubscription","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","removeAllListeners","found","MIN_RETRY_DELAY","RETRY_BACKOFF_FACTOR","MAX_RETRY_DELAY","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","naiveFallback","self","window","module","exports","globalThis","defineProperty","prototype","configurable","__global__","protocolsOrOptions","options","onclose","ondown","onreopen","CONNECTING","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","listeners","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","reason","disposeSocket","shutdown","handleClose","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","_this","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","slice","callListener","defaultPrevented","call","handleEvent","debug","s","POSITIVE_INFINITY","DEFAULT_OPTIONS","_globalThis","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop"],"sourceRoot":""}