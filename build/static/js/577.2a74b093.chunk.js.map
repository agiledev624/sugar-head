{"version":3,"file":"static/js/577.2a74b093.chunk.js","mappings":"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","sources":["components/Sidebar/index.jsx","components/MainContainer/index.jsx","config/index.jsx","hooks/connectors.jsx","hooks/useConnectWallet.jsx","hooks/useSwitchChain.js","utils/utils.jsx","components/ConnectWalletButton/index.jsx","services/blockchain/blockchainService.jsx","services/blockchain/sugarHeadService.jsx","components/Timer/index.jsx","hooks/useFetch.jsx","pages/MintPage/MintStatus/index.jsx","pages/MintPage/NFTCarousel/index.jsx","pages/MintPage/RoadMap/index.jsx","pages/MintPage/SecretSauce/index.jsx","pages/MintPage/TeamInfo/index.jsx","services/blockchain/assetService.jsx","pages/MintPage/Vault/index.jsx","store/actions/globalActions.jsx","pages/MintPage/index.jsx"],"sourcesContent":["// import sidebarImage from 'assets/images/sidebar.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        width: '100%',\r\n        // backgroundImage: `url(${sidebarImage})`,\r\n        // backgroundRepeat: 'no-repeat',\r\n        // backgroundSize: '215% 100%',\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import bgImage from 'assets/images/background.png';\r\nimport Sidebar from 'components/Sidebar';\r\nimport React, { useState } from 'react';\r\n\r\nimport { Box, Container } from '@mui/material';\r\n\r\nfunction MainContainer({ children }) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  return (\r\n    <Container\r\n      maxWidth=\"100000px\"\r\n      disableGutters\r\n      sx={{\r\n        width: '100%',\r\n        height: '222vw',\r\n        paddingTop: '19%',\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          width: '100%',\r\n          // height: 'calc(100% - 100px)',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'flex-start',\r\n          zIndex: 10,\r\n        }}\r\n      >\r\n        {/* <Box sx={{ width: '10.5%', height: '100%' }}>\r\n          <Sidebar />\r\n        </Box> */}\r\n        <Box\r\n          sx={{\r\n            marginLeft: '10.5%',\r\n            width: '83%',\r\n            height: '100%',\r\n            background: 'transparent',\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n      </Box>\r\n\r\n      {isLoading && (\r\n        <div\r\n          style={{\r\n            width: '100%',\r\n            position: 'absolute',\r\n            height: '100%',\r\n            backgroundColor: 'white',\r\n            left: '0%',\r\n            top: '0%',\r\n          }}\r\n        >\r\n          Welcome\r\n        </div>\r\n      )}\r\n      <img\r\n        src={require('assets/images/background.png')}\r\n        alt=\"\"\r\n        loading=\"lazy\"\r\n        onLoad={() => {\r\n          console.log('laodeeddadf');\r\n          setIsLoading(false);\r\n        }}\r\n        style={{\r\n          position: 'absolute',\r\n          width: '100%',\r\n          height: '222vw',\r\n          left: '0%',\r\n          top: '0%',\r\n          zIndex: -1,\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import configDev from './config.dev.json';\r\nimport configProd from './config.real.json';\r\n\r\nconst NODE_ENVS = {\r\n  DEV: 'development',\r\n  PROD: 'production',\r\n};\r\nconst config = process.env.NODE_ENV === NODE_ENVS.DEV ? configDev : configProd;\r\n\r\nexport default config;\r\n","import config from 'config';\r\n\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedchainIds: [config.chainId],\r\n});\r\n\r\nexport const connectorsByName = {\r\n  Injected: injected,\r\n};\r\n\r\nexport const connectorName = 'Injected';\r\n","import { connectorName, connectorsByName } from 'hooks/connectors';\n\nimport { useWeb3React } from '@web3-react/core';\n\nfunction useConnectWallet() {\n  const { activate } = useWeb3React();\n  return () => {\n    activate(connectorsByName[connectorName]);\n  };\n}\n\nexport default useConnectWallet;\n","import { convertToHex } from 'utils/utils';\n\nfunction useSwitchChain() {\n  return (chainId) => {\n    (async function () {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: convertToHex(chainId) }], // chainId must be in hexadecimal numbers\n      });\n    })();\n  };\n}\n\nexport default useSwitchChain;\n","const convertToHex = (value) => {\r\n  return ['0x', value.toString(16)].join('');\r\n};\r\n\r\nfunction shortWeb3Acount(currentAccount) {\r\n  if (currentAccount) {\r\n    return currentAccount\r\n      .slice(0, 6)\r\n      .concat('...')\r\n      .concat(\r\n        currentAccount.slice(currentAccount.length - 4, currentAccount.length)\r\n      );\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst sleep = (milliseconds) => {\r\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n};\r\n\r\nexport { convertToHex, shortWeb3Acount, sleep };\r\n","import mintBtnImage from 'assets/images/mint_btn.png';\nimport config from 'config';\nimport { useConnectWallet, useSwitchChain } from 'hooks';\nimport React, { useEffect } from 'react';\nimport { shortWeb3Acount } from 'utils/utils';\n\nimport { Button } from '@mui/material';\nimport { useWeb3React } from '@web3-react/core';\n\nconst ConnectWalletButton = () => {\n  const connectWallet = useConnectWallet();\n  const switchChain = useSwitchChain();\n  const { account, chainId } = useWeb3React();\n  const handleConnect = async () => {\n    await connectWallet();\n  };\n\n  useEffect(() => {\n    if (chainId && chainId !== config.chainId) {\n      switchChain(config.chainId);\n    }\n  }, [chainId, switchChain]);\n\n  return (\n    <React.Fragment>\n      {/* {account ? (\n        <Button>{shortWeb3Acount(account)}</Button>\n      ) : ( */}\n      <Button onClick={handleConnect}>\n        <img src={mintBtnImage} style={{ width: '100%', height: '100%' }} />\n      </Button>\n      {/* )} */}\n    </React.Fragment>\n  );\n};\n\nexport default ConnectWalletButton;\n","import config from 'config';\r\nimport Web3 from 'web3';\r\n\r\nclass BlockchainService {\r\n  constructor() {\r\n    const selectedProvider = Math.floor(\r\n      Math.random() * config.chainRpcUrls.length\r\n    );\r\n    const blockchainProvider = config.chainRpcUrls[selectedProvider];\r\n\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(blockchainProvider));\r\n    this.chainId = config.chainId;\r\n  }\r\n\r\n  getNonce = async (address) => this.web3.eth.getTransactionCount(address);\r\n\r\n  getEthBalance = async (address) => this.web3.eth.getBalance(address);\r\n\r\n  // sign transaction using metamask\r\n  signTransaction = async (address, dataABI, _etherAmount) => {\r\n    const transactionParameters = {\r\n      to: this.contractAddress, // Required except during contract publications.\r\n      from: address, // must match user's active address.\r\n      data: dataABI,\r\n      chainId: this.chainId,\r\n      value: parseInt(_etherAmount).toString(16), // this should be hex !!!!\r\n    };\r\n\r\n    //sign the transaction\r\n    try {\r\n      const txHash = await window.ethereum.request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n      return await this.checkTx(txHash);\r\n    } catch (error) {\r\n      alert('There was an error in sending transaction. Please try again.');\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  checkTx = async (txHash) => {\r\n    // let result = await web3.eth.getTransaction(txHash)\r\n    let result = null;\r\n    while (result == null) {\r\n      result = await this.web3.eth.getTransactionReceipt(txHash.toString());\r\n    }\r\n    if (result.status) return txHash;\r\n    else return null;\r\n  };\r\n}\r\n\r\nconst blockchainService = new BlockchainService();\r\n\r\nexport default BlockchainService;\r\nexport { blockchainService };\r\n","import ERC721Abi from 'abi/ERC721.json';\r\nimport SugarHeadAbi from 'abi/SugarHeadNFT.json';\r\nimport config from 'config';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport BlockchainService from './blockchainService';\r\n\r\nclass SugarHeadService extends BlockchainService {\r\n  constructor(sugarHeadAddr, chadinuAddr, dvdaAddr) {\r\n    super();\r\n    this.contractAddress = sugarHeadAddr;\r\n    this.contract = new this.web3.eth.Contract(SugarHeadAbi, sugarHeadAddr);\r\n    this.chadinuContract = new this.web3.eth.Contract(ERC721Abi, chadinuAddr);\r\n    this.dvdaContract = new this.web3.eth.Contract(ERC721Abi, dvdaAddr);\r\n  }\r\n\r\n  getTokenIdsOf = async (address) =>\r\n    this.contract.methods.getTokenIdsOf(address).call();\r\n\r\n  getCurrentTokenId = async () =>\r\n    this.contract.methods.getCurrentTokenId().call();\r\n\r\n  getPrice = async () => this.contract.methods.getPrice().call();\r\n\r\n  getCurrentPhase = async () => this.contract.methods.currentPhase().call();\r\n\r\n  checkAmount = async (amount) => {\r\n    if (amount > config.maxTicketsPerTX) {\r\n      toast.error(\r\n        `You can't buy more than ${config.maxTicketsPerTX} tickets at once.`\r\n      );\r\n      return false;\r\n    }\r\n    if (amount < 0) {\r\n      toast.error(`Invalid Amount`);\r\n      return false;\r\n    }\r\n\r\n    const currentTokenId = parseInt(await this.getCurrentTokenId());\r\n    if (currentTokenId + amount >= config.totalSuppy) {\r\n      toast.error(`Remained NFTs are less than ${amount}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  checkEthBalance = async (from, ethAmount) => {\r\n    const ethBalance = await this.getEthBalance(from);\r\n    if (Number(ethBalance) < ethAmount) {\r\n      toast.error(\"You don't have enough fund\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  checkIsEarlyMinter = async (from) => {\r\n    const isEarlyMinter = await this.contract.methods\r\n      .isEarlyMinter(from)\r\n      .call();\r\n    const isDVDAHolder =\r\n      parseInt(await this.dvdaContract.methods.balanceOf(from).call()) > 0;\r\n\r\n    if (isDVDAHolder || isEarlyMinter) return true;\r\n    else {\r\n      toast.error(\"You aren't whitelisted as a early minter.\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  buyNFTWithChadinu = async (from) => {\r\n    try {\r\n      const isChadVipHolder =\r\n        parseInt(await this.chadinuContract.methods.balanceOf(from).call()) > 0;\r\n\r\n      if (!isChadVipHolder) {\r\n        toast.error(\"You aren't chadinu vip holder.\");\r\n        return null;\r\n      }\r\n      const dataAbi = this.contract.methods.buyNFTWithChadinu().encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTForFree = async (from) => {\r\n    try {\r\n      const isWhitelisted =\r\n        parseInt(await this.contract.methods.freeMinters(from).call()) > 0;\r\n\r\n      if (!isWhitelisted) {\r\n        toast.error(\"You aren't whitelisted.\");\r\n        return null;\r\n      }\r\n      const dataAbi = this.contract.methods.buyNFTForFree().encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTEarly = async (from, amount, price) => {\r\n    try {\r\n      const ethAmount = price * amount;\r\n      const isEarlyMinter = await this.checkIsEarlyMinter(from);\r\n      const isFundSufficient = await this.checkEthBalance(from, ethAmount);\r\n      const isAmountValid = await this.checkAmount(amount);\r\n      if (!isAmountValid || !isFundSufficient || !isEarlyMinter) return null;\r\n\r\n      const dataAbi = this.contract.methods.buyNFTEarly(amount).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, ethAmount);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTsInPublic = async (from, amount, price) => {\r\n    try {\r\n      const ethAmount = price * amount;\r\n      const isFundSufficient = await this.checkEthBalance(from, ethAmount);\r\n      const isAmountValid = await this.checkAmount(amount);\r\n      if (!isAmountValid || !isFundSufficient) return null;\r\n\r\n      const dataAbi = this.contract.methods.buyNFTsInPublic(amount).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, ethAmount);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\nconst sugarHeadService = new SugarHeadService(\r\n  config.sugarHeadAddress,\r\n  config.chadinuAddress,\r\n  config.dvdaAddress\r\n);\r\n\r\nexport default SugarHeadService;\r\nexport { sugarHeadService };\r\n","import { useCountdown } from 'hooks/useCountDown';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { store } from 'store';\r\nimport { setClaimable } from 'store/actions/globalActions';\r\n\r\nimport { Typography } from '@mui/material';\r\n\r\nfunction Timer({ targetTime }) {\r\n  const [days, hours, minutes, seconds] = useCountdown(targetTime);\r\n  const [isExpired, setIsExpired] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (days + hours + minutes + seconds <= 0) {\r\n      store.dispatch(setClaimable());\r\n      setIsExpired(true);\r\n    }\r\n  }, [days, hours, minutes, seconds]);\r\n\r\n  if (isExpired) {\r\n    return (\r\n      <Typography variant=\"h1\" component=\"h2\">\r\n        Expired\r\n      </Typography>\r\n    );\r\n  } else {\r\n    return (\r\n      <Typography variant=\"h3\" component=\"h2\" fontFamily=\"LapsusBold\">\r\n        {days} : {hours} : {minutes} : {seconds}\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setdata] = useState(null);\r\n  const [loading, setloading] = useState(true);\r\n  const [error, seterror] = useState('');\r\n  useEffect(() => {\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        setdata(response.data);\r\n        setloading(false);\r\n      })\r\n      .catch((error) => {\r\n        seterror(error);\r\n        setloading(false);\r\n      });\r\n  }, [url]);\r\n  return { data, loading, error };\r\n};\r\nexport default useFetch;\r\n","import mintStatusImage from 'assets/images/mint_status.png';\r\nimport ConnectWalletButton from 'components/ConnectWalletButton';\r\nimport Timer from 'components/Timer';\r\nimport config from 'config';\r\nimport useFetch from 'hooks/useFetch';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { sugarHeadService } from 'services/blockchain/sugarHeadService';\r\nimport { useAppSelector } from 'store';\r\nimport { store } from 'store';\r\nimport { setCurrentTokenId } from 'store/actions/globalActions';\r\n\r\nimport { Box, Button } from '@mui/material';\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nfunction MintStatus({ sx }) {\r\n  const { active, account } = useWeb3React();\r\n  const { price, currentTokenId } = useAppSelector((state) => state.global);\r\n  const { data, loading, error } = useFetch(`${config.apiBaseURL}time`);\r\n\r\n  useEffect(() => {\r\n    console.log(data, loading, error);\r\n  }, []);\r\n\r\n  const onMint = async () => {\r\n    if (!active) {\r\n      toast.error(\"Metamask isn't connected.\");\r\n      return;\r\n    }\r\n    const tx = await sugarHeadService.buyNFTWithChadinu(account);\r\n    // await sugarHeadService.buyNFTForFree(account);\r\n    // await sugarHeadService.buyNFTEarly(account, 1, price);\r\n    // await sugarHeadService.buyNFTsInPublic(account, 1, price);\r\n    if (tx !== null) store.dispatch(setCurrentTokenId());\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(price, currentTokenId);\r\n  }, [price, currentTokenId]);\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundImage: `url(${mintStatusImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Box sx={{ marginLeft: '25%', width: '50%', height: '30%' }}>\r\n        <ConnectWalletButton />\r\n      </Box>\r\n      {/* <Button onClick={onMint}>Mint</Button>\r\n      {!loading && !error && <Timer targetTime={data.lockedTime * 1000} />} */}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MintStatus;\r\n","import carouselImage from 'assets/images/carousel.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nimport './carousel.css';\r\n\r\nfunction NFTCarousel({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundImage: `url(${carouselImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        padding: '1.5% 0%',\r\n        overflow: 'hidden',\r\n        ...sx,\r\n      }}\r\n    >\r\n      <img\r\n        src={require('assets/images/carousel.png')}\r\n        alt=\"\"\r\n        className=\"none-img\"\r\n      />\r\n      <Box sx={{ height: '100%', width: '200%' }} className=\"carousel\">\r\n        {/* {Array(10)\r\n          .fill()\r\n          .map((_, i) => (\r\n            <img\r\n              style={{ height: '100%', width: '9%', marginLeft: '1%' }}\r\n              key={i}\r\n              src={require(`assets/images/nfts/${i + 1}.png`)}\r\n              alt={i}\r\n            />\r\n          ))} */}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NFTCarousel;\r\n","import roadmapImage from 'assets/images/roadmap.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction RoadMap({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        backgroundImage: `url(${roadmapImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default RoadMap;\r\n","import secretSauceImage from 'assets/images/secret_sauce.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction SecretSauce({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        backgroundImage: `url(${secretSauceImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default SecretSauce;\r\n","import teamImage from 'assets/images/team.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction TeamInfo({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundImage: `url(${teamImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default TeamInfo;\r\n","import AssetLockAbi from 'abi/AssetLock.json';\r\nimport config from 'config';\r\n\r\nimport BlockchainService from './blockchainService';\r\n\r\nclass AssetService extends BlockchainService {\r\n  constructor(assetAddress) {\r\n    super();\r\n    this.contractAddress = assetAddress;\r\n    this.contract = new this.web3.eth.Contract(AssetLockAbi, assetAddress);\r\n  }\r\n\r\n  claimAsset = async (from, tokenIds) => {\r\n    try {\r\n      const dataAbi = this.contract.methods.claim(tokenIds).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\nconst assetService = new AssetService(config.assetLockAddress);\r\n\r\nexport default AssetService;\r\nexport { assetService };\r\n","import { useBoolean } from 'ahooks';\r\nimport vaultImage from 'assets/images/vault.png';\r\nimport valutConnectBtnImage from 'assets/images/vault_connect_btn.png';\r\nimport { useEffect } from 'react';\r\nimport { assetService } from 'services/blockchain/assetService';\r\nimport { store } from 'store';\r\nimport { useAppSelector } from 'store';\r\nimport { setTokenIds } from 'store/actions/globalActions';\r\n\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Box, Button } from '@mui/material';\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nfunction Vault({ sx }) {\r\n  const { active, account } = useWeb3React();\r\n  const { tokenIds, claimable } = useAppSelector((state) => state.global);\r\n  const [isClaiming, setIsClaiming] = useBoolean(false);\r\n  useEffect(() => {\r\n    if (active) store.dispatch(setTokenIds(account));\r\n  }, [active, account]);\r\n\r\n  const onClaim = async () => {\r\n    setIsClaiming.setTrue();\r\n    const tx = await assetService.claimAsset(account, tokenIds);\r\n    if (tx !== null) toast.success('Successfully claimed!');\r\n    setIsClaiming.setFalse();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundImage: `url(${vaultImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Button\r\n        sx={{\r\n          marginLeft: '3%',\r\n          width: '25%',\r\n          height: '16%',\r\n          padding: '0.8% 0',\r\n        }}\r\n      >\r\n        <img\r\n          src={valutConnectBtnImage}\r\n          style={{ width: '100%', height: '100%' }}\r\n        />\r\n      </Button>\r\n      {/* {tokenIds}\r\n      <LoadingButton\r\n        disabled={!(active && claimable && tokenIds.length > 0)}\r\n        onClick={onClaim}\r\n        loading={isClaiming}\r\n      >\r\n        Claim\r\n      </LoadingButton> */}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Vault;\r\n","import { sugarHeadService } from 'services/blockchain/sugarHeadService';\r\n\r\nimport { actionTypes } from './types';\r\n\r\nconst setCurrentPhase = () => {\r\n  return async (dispatch) => {\r\n    const currentPhase = parseInt(await sugarHeadService.getCurrentPhase());\r\n    dispatch({\r\n      type: actionTypes.setCurrentPhase,\r\n      currentPhase,\r\n    });\r\n  };\r\n};\r\n\r\nconst setPrice = () => {\r\n  return async (dispatch) => {\r\n    const price = parseInt(await sugarHeadService.getPrice());\r\n    dispatch({\r\n      type: actionTypes.setPrice,\r\n      price,\r\n    });\r\n  };\r\n};\r\n\r\nconst setCurrentTokenId = () => {\r\n  return async (dispatch) => {\r\n    const currentTokenId = parseInt(await sugarHeadService.getCurrentTokenId());\r\n    dispatch({\r\n      type: actionTypes.setCurrentTokenId,\r\n      currentTokenId,\r\n    });\r\n  };\r\n};\r\n\r\nconst setTokenIds = (from) => {\r\n  return async (dispatch) => {\r\n    const tokenIds = parseInt(await sugarHeadService.getTokenIdsOf(from));\r\n    dispatch({\r\n      type: actionTypes.setTokenIds,\r\n      tokenIds,\r\n    });\r\n  };\r\n};\r\n\r\nconst setClaimable = () => {\r\n  return {\r\n    type: actionTypes.setClaimable,\r\n  };\r\n};\r\n\r\nexport {\r\n  setClaimable,\r\n  setCurrentPhase,\r\n  setCurrentTokenId,\r\n  setPrice,\r\n  setTokenIds,\r\n};\r\n","import MainContainer from 'components/MainContainer';\r\nimport MintStatus from 'pages/MintPage/MintStatus';\r\nimport NFTCarousel from 'pages/MintPage/NFTCarousel';\r\nimport RoadMap from 'pages/MintPage/RoadMap';\r\nimport SecretSauce from 'pages/MintPage/SecretSauce';\r\nimport TeamInfo from 'pages/MintPage/TeamInfo';\r\nimport Vault from 'pages/MintPage/Vault';\r\nimport { useEffect } from 'react';\r\nimport React from 'react';\r\nimport { store } from 'store';\r\nimport {\r\n  setCurrentPhase,\r\n  setCurrentTokenId,\r\n  setPrice,\r\n} from 'store/actions/globalActions';\r\nimport { sleep } from 'utils/utils';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nconst imgs = [\r\n  require('assets/images/background.png'),\r\n  require('assets/images/roadmap.png'),\r\n  require('assets/images/secret_sauce.png'),\r\n  require('assets/images/team.png'),\r\n  require('assets/images/vault.png'),\r\n  require('assets/images/mint_status.png'),\r\n];\r\n\r\nfunction MintPage() {\r\n  useEffect(() => {\r\n    // store.dispatch(setCurrentPhase());\r\n    // store.dispatch(setPrice());\r\n    // store.dispatch(setCurrentTokenId());\r\n  }, []);\r\n\r\n  return (\r\n    <MainContainer>\r\n      <Box\r\n        sx={{\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <MintStatus sx={{ height: '22%' }} />\r\n        <NFTCarousel sx={{ height: '10%' }} />\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            height: '22%',\r\n          }}\r\n        >\r\n          <SecretSauce sx={{ width: '45%' }} />\r\n          <RoadMap sx={{ width: '45%' }} />\r\n        </Box>\r\n        <Vault sx={{ height: '22%' }} />\r\n        <TeamInfo sx={{ height: '22%' }} />\r\n      </Box>\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nexport default MintPage;\r\n"],"names":["children","useState","isLoading","setIsLoading","Container","maxWidth","disableGutters","sx","width","height","paddingTop","display","justifyContent","zIndex","marginLeft","background","style","position","backgroundColor","left","top","src","require","alt","loading","onLoad","console","log","connectorsByName","Injected","InjectedConnector","supportedchainIds","config","activate","useWeb3React","chainId","window","ethereum","request","method","params","value","toString","join","connectWallet","useConnectWallet","switchChain","useSwitchChain","account","handleConnect","useEffect","Button","onClick","mintBtnImage","BlockchainService","getNonce","address","web3","eth","getTransactionCount","getEthBalance","getBalance","signTransaction","dataABI","_etherAmount","transactionParameters","to","contractAddress","from","data","parseInt","txHash","checkTx","alert","result","getTransactionReceipt","status","selectedProvider","Math","floor","random","blockchainProvider","this","Web3","SugarHeadService","sugarHeadAddr","chadinuAddr","dvdaAddr","getTokenIdsOf","contract","methods","call","getCurrentTokenId","getPrice","getCurrentPhase","currentPhase","checkAmount","amount","toast","checkEthBalance","ethAmount","ethBalance","Number","checkIsEarlyMinter","isEarlyMinter","dvdaContract","balanceOf","buyNFTWithChadinu","chadinuContract","dataAbi","encodeABI","buyNFTForFree","freeMinters","buyNFTEarly","price","isFundSufficient","buyNFTsInPublic","Contract","SugarHeadAbi","ERC721Abi","sugarHeadService","url","setdata","setloading","error","seterror","axios","then","response","catch","active","useAppSelector","state","global","currentTokenId","useFetch","backgroundImage","mintStatusImage","backgroundRepeat","backgroundSize","carouselImage","padding","overflow","className","roadmapImage","secretSauceImage","teamImage","AssetService","assetAddress","claimAsset","tokenIds","claim","AssetLockAbi","claimable","useBoolean","store","dispatch","type","actionTypes","vaultImage","valutConnectBtnImage","flexDirection"],"sourceRoot":""}