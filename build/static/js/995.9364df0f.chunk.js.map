{"version":3,"file":"static/js/995.9364df0f.chunk.js","mappings":"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","sources":["components/Sidebar/index.jsx","components/MainContainer/index.jsx","config/index.jsx","hooks/connectors.jsx","hooks/useConnectWallet.jsx","hooks/useSwitchChain.js","utils/utils.jsx","components/ConnectWalletButton/index.jsx","services/blockchain/blockchainService.jsx","services/blockchain/sugarHeadService.jsx","components/Timer/index.jsx","hooks/useFetch.jsx","pages/MintPage/MintStatus/index.jsx","pages/MintPage/NFTCarousel/index.jsx","pages/MintPage/RoadMap/index.jsx","pages/MintPage/SecretSauce/index.jsx","pages/MintPage/TeamInfo/index.jsx","services/blockchain/assetService.jsx","pages/MintPage/Vault/index.jsx","store/actions/globalActions.jsx","pages/MintPage/index.jsx"],"sourcesContent":["// import sidebarImage from 'assets/images/sidebar.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        width: '100%',\r\n        // backgroundImage: `url(${sidebarImage})`,\r\n        // backgroundRepeat: 'no-repeat',\r\n        // backgroundSize: '215% 100%',\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import bgImage from 'assets/images/background.png';\r\nimport Sidebar from 'components/Sidebar';\r\nimport React from 'react';\r\n\r\nimport { Box, Container } from '@mui/material';\r\n\r\nfunction MainContainer({ children }) {\r\n  return (\r\n    <Container\r\n      maxWidth=\"100000px\"\r\n      disableGutters\r\n      sx={{\r\n        width: '100%',\r\n        height: '200vw',\r\n        paddingTop: '17.2%',\r\n        backgroundImage: `url(${bgImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          width: '100%',\r\n          // height: 'calc(100% - 100px)',\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'flex-start',\r\n        }}\r\n      >\r\n        {/* <Box sx={{ width: '10.5%', height: '100%' }}>\r\n          <Sidebar />\r\n        </Box> */}\r\n        <Box\r\n          sx={{\r\n            marginLeft: '10.5%',\r\n            width: '83%',\r\n            height: '100%',\r\n            background: 'transparent',\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MainContainer;\r\n","import configDev from './config.dev.json';\r\nimport configProd from './config.real.json';\r\n\r\nconst NODE_ENVS = {\r\n  DEV: 'development',\r\n  PROD: 'production',\r\n};\r\nconst config = process.env.NODE_ENV === NODE_ENVS.DEV ? configDev : configProd;\r\n\r\nexport default config;\r\n","import config from 'config';\r\n\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedchainIds: [config.chainId],\r\n});\r\n\r\nexport const connectorsByName = {\r\n  Injected: injected,\r\n};\r\n\r\nexport const connectorName = 'Injected';\r\n","import { connectorName, connectorsByName } from 'hooks/connectors';\n\nimport { useWeb3React } from '@web3-react/core';\n\nfunction useConnectWallet() {\n  const { activate } = useWeb3React();\n  return () => {\n    activate(connectorsByName[connectorName]);\n  };\n}\n\nexport default useConnectWallet;\n","import { convertToHex } from 'utils/utils';\n\nfunction useSwitchChain() {\n  return (chainId) => {\n    (async function () {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: convertToHex(chainId) }], // chainId must be in hexadecimal numbers\n      });\n    })();\n  };\n}\n\nexport default useSwitchChain;\n","const convertToHex = (value) => {\r\n  return ['0x', value.toString(16)].join('');\r\n};\r\n\r\nfunction shortWeb3Acount(currentAccount) {\r\n  if (currentAccount) {\r\n    return currentAccount\r\n      .slice(0, 6)\r\n      .concat('...')\r\n      .concat(\r\n        currentAccount.slice(currentAccount.length - 4, currentAccount.length)\r\n      );\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { convertToHex, shortWeb3Acount };\r\n","import mintBtnImage from 'assets/images/mint_btn.png';\nimport config from 'config';\nimport { useConnectWallet, useSwitchChain } from 'hooks';\nimport React, { useEffect } from 'react';\nimport { shortWeb3Acount } from 'utils/utils';\n\nimport { Button } from '@mui/material';\nimport { useWeb3React } from '@web3-react/core';\n\nconst ConnectWalletButton = () => {\n  const connectWallet = useConnectWallet();\n  const switchChain = useSwitchChain();\n  const { account, chainId } = useWeb3React();\n  const handleConnect = async () => {\n    await connectWallet();\n  };\n\n  useEffect(() => {\n    if (chainId && chainId !== config.chainId) {\n      switchChain(config.chainId);\n    }\n  }, [chainId, switchChain]);\n\n  return (\n    <React.Fragment>\n      {/* {account ? (\n        <Button>{shortWeb3Acount(account)}</Button>\n      ) : ( */}\n      <Button onClick={handleConnect}>\n        <img src={mintBtnImage} style={{ width: '100%', height: '100%' }} />\n      </Button>\n      {/* )} */}\n    </React.Fragment>\n  );\n};\n\nexport default ConnectWalletButton;\n","import config from 'config';\r\nimport Web3 from 'web3';\r\n\r\nclass BlockchainService {\r\n  constructor() {\r\n    const selectedProvider = Math.floor(\r\n      Math.random() * config.chainRpcUrls.length\r\n    );\r\n    const blockchainProvider = config.chainRpcUrls[selectedProvider];\r\n\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(blockchainProvider));\r\n    this.chainId = config.chainId;\r\n  }\r\n\r\n  getNonce = async (address) => this.web3.eth.getTransactionCount(address);\r\n\r\n  getEthBalance = async (address) => this.web3.eth.getBalance(address);\r\n\r\n  // sign transaction using metamask\r\n  signTransaction = async (address, dataABI, _etherAmount) => {\r\n    const transactionParameters = {\r\n      to: this.contractAddress, // Required except during contract publications.\r\n      from: address, // must match user's active address.\r\n      data: dataABI,\r\n      chainId: this.chainId,\r\n      value: parseInt(_etherAmount).toString(16), // this should be hex !!!!\r\n    };\r\n\r\n    //sign the transaction\r\n    try {\r\n      const txHash = await window.ethereum.request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n      return await this.checkTx(txHash);\r\n    } catch (error) {\r\n      alert('There was an error in sending transaction. Please try again.');\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  checkTx = async (txHash) => {\r\n    // let result = await web3.eth.getTransaction(txHash)\r\n    let result = null;\r\n    while (result == null) {\r\n      result = await this.web3.eth.getTransactionReceipt(txHash.toString());\r\n    }\r\n    if (result.status) return txHash;\r\n    else return null;\r\n  };\r\n}\r\n\r\nconst blockchainService = new BlockchainService();\r\n\r\nexport default BlockchainService;\r\nexport { blockchainService };\r\n","import ERC721Abi from 'abi/ERC721.json';\r\nimport SugarHeadAbi from 'abi/SugarHeadNFT.json';\r\nimport config from 'config';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport BlockchainService from './blockchainService';\r\n\r\nclass SugarHeadService extends BlockchainService {\r\n  constructor(sugarHeadAddr, chadinuAddr, dvdaAddr) {\r\n    super();\r\n    this.contractAddress = sugarHeadAddr;\r\n    this.contract = new this.web3.eth.Contract(SugarHeadAbi, sugarHeadAddr);\r\n    this.chadinuContract = new this.web3.eth.Contract(ERC721Abi, chadinuAddr);\r\n    this.dvdaContract = new this.web3.eth.Contract(ERC721Abi, dvdaAddr);\r\n  }\r\n\r\n  getTokenIdsOf = async (address) =>\r\n    this.contract.methods.getTokenIdsOf(address).call();\r\n\r\n  getCurrentTokenId = async () =>\r\n    this.contract.methods.getCurrentTokenId().call();\r\n\r\n  getPrice = async () => this.contract.methods.getPrice().call();\r\n\r\n  getCurrentPhase = async () => this.contract.methods.currentPhase().call();\r\n\r\n  checkAmount = async (amount) => {\r\n    if (amount > config.maxTicketsPerTX) {\r\n      toast.error(\r\n        `You can't buy more than ${config.maxTicketsPerTX} tickets at once.`\r\n      );\r\n      return false;\r\n    }\r\n    if (amount < 0) {\r\n      toast.error(`Invalid Amount`);\r\n      return false;\r\n    }\r\n\r\n    const currentTokenId = parseInt(await this.getCurrentTokenId());\r\n    if (currentTokenId + amount >= config.totalSuppy) {\r\n      toast.error(`Remained NFTs are less than ${amount}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  checkEthBalance = async (from, ethAmount) => {\r\n    const ethBalance = await this.getEthBalance(from);\r\n    if (Number(ethBalance) < ethAmount) {\r\n      toast.error(\"You don't have enough fund\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  checkIsEarlyMinter = async (from) => {\r\n    const isEarlyMinter = await this.contract.methods\r\n      .isEarlyMinter(from)\r\n      .call();\r\n    const isDVDAHolder =\r\n      parseInt(await this.dvdaContract.methods.balanceOf(from).call()) > 0;\r\n\r\n    if (isDVDAHolder || isEarlyMinter) return true;\r\n    else {\r\n      toast.error(\"You aren't whitelisted as a early minter.\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  buyNFTWithChadinu = async (from) => {\r\n    try {\r\n      const isChadVipHolder =\r\n        parseInt(await this.chadinuContract.methods.balanceOf(from).call()) > 0;\r\n\r\n      if (!isChadVipHolder) {\r\n        toast.error(\"You aren't chadinu vip holder.\");\r\n        return null;\r\n      }\r\n      const dataAbi = this.contract.methods.buyNFTWithChadinu().encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTForFree = async (from) => {\r\n    try {\r\n      const isWhitelisted =\r\n        parseInt(await this.contract.methods.freeMinters(from).call()) > 0;\r\n\r\n      if (!isWhitelisted) {\r\n        toast.error(\"You aren't whitelisted.\");\r\n        return null;\r\n      }\r\n      const dataAbi = this.contract.methods.buyNFTForFree().encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTEarly = async (from, amount, price) => {\r\n    try {\r\n      const ethAmount = price * amount;\r\n      const isEarlyMinter = await this.checkIsEarlyMinter(from);\r\n      const isFundSufficient = await this.checkEthBalance(from, ethAmount);\r\n      const isAmountValid = await this.checkAmount(amount);\r\n      if (!isAmountValid || !isFundSufficient || !isEarlyMinter) return null;\r\n\r\n      const dataAbi = this.contract.methods.buyNFTEarly(amount).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, ethAmount);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  buyNFTsInPublic = async (from, amount, price) => {\r\n    try {\r\n      const ethAmount = price * amount;\r\n      const isFundSufficient = await this.checkEthBalance(from, ethAmount);\r\n      const isAmountValid = await this.checkAmount(amount);\r\n      if (!isAmountValid || !isFundSufficient) return null;\r\n\r\n      const dataAbi = this.contract.methods.buyNFTsInPublic(amount).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, ethAmount);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\nconst sugarHeadService = new SugarHeadService(\r\n  config.sugarHeadAddress,\r\n  config.chadinuAddress,\r\n  config.dvdaAddress\r\n);\r\n\r\nexport default SugarHeadService;\r\nexport { sugarHeadService };\r\n","import { useCountdown } from 'hooks/useCountDown';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { store } from 'store';\r\nimport { setClaimable } from 'store/actions/globalActions';\r\n\r\nimport { Typography } from '@mui/material';\r\n\r\nfunction Timer({ targetTime }) {\r\n  const [days, hours, minutes, seconds] = useCountdown(targetTime);\r\n  const [isExpired, setIsExpired] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (days + hours + minutes + seconds <= 0) {\r\n      store.dispatch(setClaimable());\r\n      setIsExpired(true);\r\n    }\r\n  }, [days, hours, minutes, seconds]);\r\n\r\n  if (isExpired) {\r\n    return (\r\n      <Typography variant=\"h1\" component=\"h2\">\r\n        Expired\r\n      </Typography>\r\n    );\r\n  } else {\r\n    return (\r\n      <Typography variant=\"h3\" component=\"h2\" fontFamily=\"LapsusBold\">\r\n        {days} : {hours} : {minutes} : {seconds}\r\n      </Typography>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setdata] = useState(null);\r\n  const [loading, setloading] = useState(true);\r\n  const [error, seterror] = useState('');\r\n  useEffect(() => {\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        setdata(response.data);\r\n        setloading(false);\r\n      })\r\n      .catch((error) => {\r\n        seterror(error);\r\n        setloading(false);\r\n      });\r\n  }, [url]);\r\n  return { data, loading, error };\r\n};\r\nexport default useFetch;\r\n","import mintStatusImage from 'assets/images/mint_status.png';\r\nimport ConnectWalletButton from 'components/ConnectWalletButton';\r\nimport Timer from 'components/Timer';\r\nimport config from 'config';\r\nimport useFetch from 'hooks/useFetch';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { sugarHeadService } from 'services/blockchain/sugarHeadService';\r\nimport { useAppSelector } from 'store';\r\nimport { store } from 'store';\r\nimport { setCurrentTokenId } from 'store/actions/globalActions';\r\n\r\nimport { Box, Button } from '@mui/material';\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nfunction MintStatus({ sx }) {\r\n  const { active, account } = useWeb3React();\r\n  const { price, currentTokenId } = useAppSelector((state) => state.global);\r\n  const { data, loading, error } = useFetch(`${config.apiBaseURL}time`);\r\n\r\n  useEffect(() => {\r\n    console.log(data, loading, error);\r\n  }, []);\r\n\r\n  const onMint = async () => {\r\n    if (!active) {\r\n      toast.error(\"Metamask isn't connected.\");\r\n      return;\r\n    }\r\n    const tx = await sugarHeadService.buyNFTWithChadinu(account);\r\n    // await sugarHeadService.buyNFTForFree(account);\r\n    // await sugarHeadService.buyNFTEarly(account, 1, price);\r\n    // await sugarHeadService.buyNFTsInPublic(account, 1, price);\r\n    if (tx !== null) store.dispatch(setCurrentTokenId());\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(price, currentTokenId);\r\n  }, [price, currentTokenId]);\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundImage: `url(${mintStatusImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Box sx={{ marginLeft: '25%', width: '50%', height: '30%' }}>\r\n        <ConnectWalletButton />\r\n      </Box>\r\n      {/* <Button onClick={onMint}>Mint</Button>\r\n      {!loading && !error && <Timer targetTime={data.lockedTime * 1000} />} */}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MintStatus;\r\n","import carouselImage from 'assets/images/carousel.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction NFTCarousel({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundImage: `url(${carouselImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default NFTCarousel;\r\n","import roadmapImage from 'assets/images/roadmap.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction RoadMap({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        backgroundImage: `url(${roadmapImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default RoadMap;\r\n","import secretSauceImage from 'assets/images/secret_sauce.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction SecretSauce({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        backgroundImage: `url(${secretSauceImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default SecretSauce;\r\n","import teamImage from 'assets/images/team.png';\r\nimport React from 'react';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction TeamInfo({ sx }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundImage: `url(${teamImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    ></Box>\r\n  );\r\n}\r\n\r\nexport default TeamInfo;\r\n","import AssetLockAbi from 'abi/AssetLock.json';\r\nimport config from 'config';\r\n\r\nimport BlockchainService from './blockchainService';\r\n\r\nclass AssetService extends BlockchainService {\r\n  constructor(assetAddress) {\r\n    super();\r\n    this.contractAddress = assetAddress;\r\n    this.contract = new this.web3.eth.Contract(AssetLockAbi, assetAddress);\r\n  }\r\n\r\n  claimAsset = async (from, tokenIds) => {\r\n    try {\r\n      const dataAbi = this.contract.methods.claim(tokenIds).encodeABI();\r\n      const txHash = await this.signTransaction(from, dataAbi, 0);\r\n      return txHash;\r\n    } catch (err) {\r\n      console.log(err);\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\nconst assetService = new AssetService(config.assetLockAddress);\r\n\r\nexport default AssetService;\r\nexport { assetService };\r\n","import { useBoolean } from 'ahooks';\r\nimport vaultImage from 'assets/images/vault.png';\r\nimport valutConnectBtnImage from 'assets/images/vault_connect_btn.png';\r\nimport { useEffect } from 'react';\r\nimport { assetService } from 'services/blockchain/assetService';\r\nimport { store } from 'store';\r\nimport { useAppSelector } from 'store';\r\nimport { setTokenIds } from 'store/actions/globalActions';\r\n\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Box, Button } from '@mui/material';\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nfunction Vault({ sx }) {\r\n  const { active, account } = useWeb3React();\r\n  const { tokenIds, claimable } = useAppSelector((state) => state.global);\r\n  const [isClaiming, setIsClaiming] = useBoolean(false);\r\n  useEffect(() => {\r\n    if (active) store.dispatch(setTokenIds(account));\r\n  }, [active, account]);\r\n\r\n  const onClaim = async () => {\r\n    setIsClaiming.setTrue();\r\n    const tx = await assetService.claimAsset(account, tokenIds);\r\n    if (tx !== null) toast.success('Successfully claimed!');\r\n    setIsClaiming.setFalse();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: '100%',\r\n        width: '100%',\r\n        backgroundImage: `url(${vaultImage})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '100% 100%',\r\n        ...sx,\r\n      }}\r\n    >\r\n      <Button sx={{ marginLeft: '3%', width: '25%', height: '16%' }}>\r\n        <img\r\n          src={valutConnectBtnImage}\r\n          style={{ width: '100%', height: '100%' }}\r\n        />\r\n      </Button>\r\n      {tokenIds}\r\n      <LoadingButton\r\n        disabled={!(active && claimable && tokenIds.length > 0)}\r\n        onClick={onClaim}\r\n        loading={isClaiming}\r\n      >\r\n        Claim\r\n      </LoadingButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Vault;\r\n","import { sugarHeadService } from 'services/blockchain/sugarHeadService';\r\n\r\nimport { actionTypes } from './types';\r\n\r\nconst setCurrentPhase = () => {\r\n  return async (dispatch) => {\r\n    const currentPhase = parseInt(await sugarHeadService.getCurrentPhase());\r\n    dispatch({\r\n      type: actionTypes.setCurrentPhase,\r\n      currentPhase,\r\n    });\r\n  };\r\n};\r\n\r\nconst setPrice = () => {\r\n  return async (dispatch) => {\r\n    const price = parseInt(await sugarHeadService.getPrice());\r\n    dispatch({\r\n      type: actionTypes.setPrice,\r\n      price,\r\n    });\r\n  };\r\n};\r\n\r\nconst setCurrentTokenId = () => {\r\n  return async (dispatch) => {\r\n    const currentTokenId = parseInt(await sugarHeadService.getCurrentTokenId());\r\n    dispatch({\r\n      type: actionTypes.setCurrentTokenId,\r\n      currentTokenId,\r\n    });\r\n  };\r\n};\r\n\r\nconst setTokenIds = (from) => {\r\n  return async (dispatch) => {\r\n    const tokenIds = parseInt(await sugarHeadService.getTokenIdsOf(from));\r\n    dispatch({\r\n      type: actionTypes.setTokenIds,\r\n      tokenIds,\r\n    });\r\n  };\r\n};\r\n\r\nconst setClaimable = () => {\r\n  return {\r\n    type: actionTypes.setClaimable,\r\n  };\r\n};\r\n\r\nexport {\r\n  setClaimable,\r\n  setCurrentPhase,\r\n  setCurrentTokenId,\r\n  setPrice,\r\n  setTokenIds,\r\n};\r\n","import MainContainer from 'components/MainContainer';\r\nimport MintStatus from 'pages/MintPage/MintStatus';\r\nimport NFTCarousel from 'pages/MintPage/NFTCarousel';\r\nimport RoadMap from 'pages/MintPage/RoadMap';\r\nimport SecretSauce from 'pages/MintPage/SecretSauce';\r\nimport TeamInfo from 'pages/MintPage/TeamInfo';\r\nimport Vault from 'pages/MintPage/Vault';\r\nimport { useEffect } from 'react';\r\nimport React from 'react';\r\nimport { store } from 'store';\r\nimport {\r\n  setCurrentPhase,\r\n  setCurrentTokenId,\r\n  setPrice,\r\n} from 'store/actions/globalActions';\r\n\r\nimport { Box } from '@mui/material';\r\n\r\nfunction MintPage() {\r\n  useEffect(() => {\r\n    // store.dispatch(setCurrentPhase());\r\n    // store.dispatch(setPrice());\r\n    // store.dispatch(setCurrentTokenId());\r\n  }, []);\r\n\r\n  return (\r\n    <MainContainer>\r\n      <Box\r\n        sx={{\r\n          height: '100%',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <MintStatus sx={{ height: '22%' }} />\r\n        <NFTCarousel sx={{ height: '10%' }} />\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            height: '22%',\r\n          }}\r\n        >\r\n          <SecretSauce sx={{ width: '45%' }} />\r\n          <RoadMap sx={{ width: '45%' }} />\r\n        </Box>\r\n        <Vault sx={{ height: '22%' }} />\r\n        <TeamInfo sx={{ height: '22%' }} />\r\n      </Box>\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nexport default MintPage;\r\n"],"names":["children","Container","maxWidth","disableGutters","sx","width","height","paddingTop","backgroundImage","bgImage","backgroundRepeat","backgroundSize","display","justifyContent","marginLeft","background","connectorsByName","Injected","InjectedConnector","supportedchainIds","config","activate","useWeb3React","chainId","window","ethereum","request","method","params","value","toString","join","connectWallet","useConnectWallet","switchChain","useSwitchChain","account","handleConnect","useEffect","Button","onClick","src","mintBtnImage","style","BlockchainService","getNonce","address","web3","eth","getTransactionCount","getEthBalance","getBalance","signTransaction","dataABI","_etherAmount","transactionParameters","to","contractAddress","from","data","parseInt","txHash","checkTx","alert","console","log","result","getTransactionReceipt","status","selectedProvider","Math","floor","random","blockchainProvider","this","Web3","SugarHeadService","sugarHeadAddr","chadinuAddr","dvdaAddr","getTokenIdsOf","contract","methods","call","getCurrentTokenId","getPrice","getCurrentPhase","currentPhase","checkAmount","amount","toast","checkEthBalance","ethAmount","ethBalance","Number","checkIsEarlyMinter","isEarlyMinter","dvdaContract","balanceOf","buyNFTWithChadinu","chadinuContract","dataAbi","encodeABI","buyNFTForFree","freeMinters","buyNFTEarly","price","isFundSufficient","buyNFTsInPublic","Contract","SugarHeadAbi","ERC721Abi","sugarHeadService","url","useState","setdata","loading","setloading","error","seterror","axios","then","response","catch","active","useAppSelector","state","global","currentTokenId","useFetch","mintStatusImage","carouselImage","roadmapImage","secretSauceImage","teamImage","AssetService","assetAddress","claimAsset","tokenIds","claim","AssetLockAbi","assetService","claimable","useBoolean","isClaiming","setIsClaiming","store","dispatch","type","actionTypes","onClaim","setTrue","success","setFalse","vaultImage","valutConnectBtnImage","LoadingButton","disabled","length","flexDirection"],"sourceRoot":""}